/**  * BfvQuery.java * * Title:			BFV Query * Description:		A servlet that queries the SVP's Bibliography of Fossil Vertebrates.It is based on bfv_retriever (John Damuth 1994,2000)Copyright Pantherion Corporation 2002, All rights reservedCopyright transferred to SVP, 2003 * John Damuth			 * B1			 *///package BFVQuery;import java.util.*;import java.io.*;import java.sql.*;import javax.servlet.*;import javax.servlet.http.*;public class BfvQuery extends HttpServlet{	Connection	conn;	Statement	stmt, stmt2;	ResultSet	rs, rs2;	String		str1,str2,str3,str4,str5,str6;	String		nl;//	String		userAgent,userSys;	PrintWriter ps;	boolean		embedded_single_quotes = false; 	String		query_string;      public void doPost (HttpServletRequest req,                       HttpServletResponse res)         throws ServletException, IOException        {  		PrintWriter out;			String fullj;		Vector conditions = new Vector();		boolean		simple_query=true;		 			        String title = "BFV Query Results";        		res.setContentType("text/html");	    out = res.getWriter();	    	    query_string = req.getParameter("query").trim();	    fullj = req.getParameter("fullj");	    	    /* HTML Preliminaries */	    	    StringBuffer head = new StringBuffer();            //    	head.append("Content-type: text/html\n\n");    	head.append("<HTML><HEAD><META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\"></head>");		head.append("<BODY TEXT=\"#000000\" BGCOLOR=\"#FFFFFF\">");    	head.append("<TITLE>");    	head.append(title);    	head.append("</TITLE></HEAD><BODY bgcolor=\"#FFFFFF\">");    	head.append("<H1>Bibliography of Fossil Vertebrates</H1>");    	    	// Check the query string for obvious format errors and embedded single quotes.    	//   No point in going on if the query is incomprehensible.    	    	String checks = check_query(query_string);    	if(!checks.equals("OK")){    		out.println(head.toString());    		out.println(checks);    		out.println("</BODY></HTML>");    		out.close();    		return;    		}    		    	StringBuffer command = new StringBuffer();	// This will hold the full SQL condition    	    			    	    	// Decide whether the query must be handled as simple or as compound    	    	if(query_string.indexOf(" and ") > -1 || query_string.indexOf(" AND ") > -1) simple_query = false;     	// If the string has embedded single quotes, escape them for a simple query    	    	if(simple_query && embedded_single_quotes){			query_string = escape_quotes(query_string);    		}    		   	    	if(!simple_query){   // I.e., there is an "and" somewhere in the query					/* Parse the command string for repeated "and" queries on the same table -- */			/*  for example, taxon='Tyrannosaurus' and taxon='rex'.  These must be      */			/*  dealt with individually, since the above as a simple query would return */			/*  no rows.															    */			/*																			*/			/* The solution is to embed subsequent queries on the same table into sub-  */			/*  queries of the form: ref.rid in (select rid from tax where taxon='XX')  */			/* Get the first condition --- there is no boolean operator (and, or). */						StringTokenizer st = new StringTokenizer(query_string,"!=>< ", true);						String botk = " ";			String ftk = st.nextToken();		// field			String etk = st.nextToken("'");		// equator			String dum = st.nextToken("'");		// first '			String vtk = st.nextToken("'");		// value					dum = st.nextToken("'");	// second '			if(embedded_single_quotes) vtk = escape_quotes(vtk);						QueryCondition qc = new QueryCondition(botk,ftk.trim(),etk.trim(),vtk.trim());			conditions.addElement(qc);					try{					while(st.hasMoreTokens()){					dum = st.nextToken(" ");		// first space					botk = st.nextToken(" ");		// boolean operator					dum = st.nextToken(" ");		// second space					ftk = st.nextToken("!=>< ");	// field					etk = st.nextToken("'");		// equator					dum = st.nextToken("'");		// first '					vtk = st.nextToken("'");		// value					dum = st.nextToken("'");		// second '					if(embedded_single_quotes) vtk = escape_quotes(vtk);									qc = new QueryCondition(botk.trim(),ftk.trim(),etk.trim(),vtk.trim());					conditions.addElement(qc);					}				}			catch(NoSuchElementException e){				out.println(head.toString());				out.println("<h2>There was an error in formatting the query.</h2><p>It contains the wrong number of terms or contains extraneous words.");            	out.println("</BODY></HTML>");            	out.close();   				return;							}								// Now that we have the conditions tokenized, turn them into SQL			command.append("(");									for(int i=0;i<conditions.size();i++){								qc = (QueryCondition)conditions.elementAt(i);				if (qc.getEquator().equals("!=") && qc.getField().equals("taxon")){					command.append(" " + qc.getBoolop() + " ref.rid not in (select rid from tax where " + qc.getField() + " = '" + qc.getValue() + "')");					}				else if (qc.getEquator().equals("!=") && qc.getField().equals("au")){					command.append(" " + qc.getBoolop() + " ref.rid not in (select rid from auths where " + qc.getField() + " = '" + qc.getValue() + "')");					}					else if (qc.getEquator().equals("!=") && qc.getField().equals("su")){					command.append(" " + qc.getBoolop() + " ref.rid not in (select rid from subj where " + qc.getField() + " = '" + qc.getValue() + "')");					}				else if (qc.getField().equals("taxon")){					command.append(" " + qc.getBoolop() + " ref.rid in (select rid from tax where " + qc.getField() + " " + qc.getEquator() + " '" + qc.getValue() + "')");					}				else if (qc.getField().equals("au")){					command.append(" " + qc.getBoolop() + " ref.rid in (select rid from auths where " + qc.getField() + " " + qc.getEquator() + " '" + qc.getValue() + "')");					}				else if (qc.getField().equals("su")){					command.append(" " + qc.getBoolop() + " ref.rid in (select rid from subj where " + qc.getField() + " " + qc.getEquator() + " '" + qc.getValue() + "')");					}				else{					command.append(" " + qc.getBoolop() + " " + qc.getField() +  " " + qc.getEquator() + " '" + qc.getValue() + "'");					}				}				command.append(")");  // End complex query			    	}    	else {    		command.append("(");    		command.append(query_string);    		command.append(")");    	    	}							// End simple query    	    	/* Load the PostgreSQL jdbc driver */    	/* On failure terminate and send HTML error message */    			try{			Class.forName("org.postgresql.Driver");			}		catch (ClassNotFoundException e){			out.println(head.toString());			out.println("<p>ERROR: ClassNotFound: failed to load PostgreSQL JDBC driver.");			out.println("<p>ERROR: " + e.getMessage());            out.println("</BODY></HTML>");            out.close();   		return;		}				String url = new String("jdbc:postgresql://localhost/bfv"); // Data are in database BFV on this host		/* Try to make DB connection; on failure terminate */				try{			conn = DriverManager.getConnection(url,"osirisdba","chunvomax");			}		catch (SQLException e){			out.println(head.toString());			out.println("<p>ERROR: failed to connect!");			out.println("<p>ERROR: " + e.getMessage());       		out.println("</BODY></HTML>");       	 	out.close();   		return;		}		// OK, now let's make the basic SQL command to retrieve records				StringBuffer sql_command = new StringBuffer();		sql_command.append("select distinct ref.rid,ref.ti,ref.date,ref.jn,ref.jnfk,ref.vo,");		sql_command.append(" ref.pg,ref.pub,ref.type,ref.edvo,ref.trans,ref.tt,ref.ts,ref.ed");		if(simple_query){			sql_command.append(" from ref,subj,tax,auths where ref.rid=subj.rid and ref.rid=tax.rid and ref.rid = auths.rid and ");			}		else{			sql_command.append(" from ref where ");			}		sql_command.append(command);		sql_command.append(" ORDER BY ref.date");				StringBuffer sql_auths_command;		// Open an appropriate translator --- the BFV embedded codes must be turned into		//  a standard character set				BfvCharacterTranslator tr = new BfvCharacterTranslator("HTML");				// Open an appropriate formatter for the final entries --- html=true is default		//   but there is a setHtml(boolean) method				BfvFormatter fm = new BfvFormatJVP();				Vector recV = new Vector();  // This will hold all the formatted records once we're done, ready to printsql_auths_command = new StringBuffer();BfvRecord rec = new BfvRecord();AuthsRecord arec = new AuthsRecord();						try{			stmt = conn.createStatement();			rs = stmt.executeQuery(sql_command.toString());			int numrecs = 0;//			BfvRecord rec;//			AuthsRecord arec;			Vector auV;			recV = new Vector();			while (rs.next()){					rec = new BfvRecord();				rec.setRid(rs.getString(1));				rec.setTi(tr.convert(rs.getString(2)));				rec.setDate(tr.convert(rs.getString(3)));				rec.setJn(tr.convert(rs.getString(4)));				rec.setJnfk(tr.convert(rs.getString(5)));				rec.setVo(tr.convert(rs.getString(6)));				rec.setPg(tr.convert(rs.getString(7)));				rec.setPub(tr.convert(rs.getString(8)));				rec.setType(tr.convert(rs.getString(9)));				rec.setEdvo(tr.convert(rs.getString(10)));				rec.setTrans(tr.convert(rs.getString(11)));				rec.setTt(tr.convert(rs.getString(12)));				rec.setTs(tr.convert(rs.getString(13)));				rec.setEd(tr.convert(rs.getString(14)));				// Get authors for this record					sql_auths_command = new StringBuffer();						auV = new Vector();					stmt2 = conn.createStatement();										sql_auths_command.append("SELECT serau,fn,aorder,role FROM auths WHERE rid= " + rec.getRid() + " ORDER BY aorder");					rs2 = stmt2.executeQuery(sql_auths_command.toString());					while (rs2.next()){						arec = new AuthsRecord();						arec.setSerau(tr.convert(rs2.getString(1)));						arec.setFn(tr.convert(rs2.getString(2)));						arec.setAorder(rs2.getString(3));						arec.setRole(rs2.getString(4));						auV.addElement(arec);						}//						arec.setSerau("Smith");//						arec.setFn("John Jacob");//						arec.setAorder("0");//						arec.setRole("");//						auV.addElement(arec);								// Now go ahead and format it, and add it to the record vector								recV.addElement(fm.format(rec, auV));									numrecs++;				}							// Print all the records out and we're done												if (recV.size() == 0){				out.println(head.toString());				out.println("<p>Query: " + query_string + "<p>");				out.println("No records satisfied the query.");       			out.println("</BODY></HTML>");       	 		out.close();       	 		terminate();   				}			else{				out.println(head.toString());				out.println("<p>Query: " + query_string + "<p>");				if(recV.size() == 1) out.println("1 reference statisfied the query.<p><p>");				else out.println("" + recV.size() + " references satisfied the query.<p><p>");				for(int i=0;i<recV.size();i++){					String st = (String)recV.elementAt(i);					out.println(st);					}				out.println("</BODY></HTML>");       	 		out.close();       	 		terminate();  				}										}		catch(Exception e){			out.println(head.toString());			out.println("<p>SQL Error! For some reason the query could not be executed.");			out.println("<p>ERROR: " + e.getMessage());out.println("<p><p>The offending command was: <p> " + sql_command.toString() + "<p> -- OR --<p> " + sql_auths_command.toString());out.println("<p><p>" + rec.getRid() + "| |" + rec.getDate() + "| |" + rec.getTi() + "| |" + rec.getJn() + "| |" + rec.getJnfk());out.println("| |" + rec.getVo() + "| |" + rec.getPg() + "| |" + rec.getPub() + "| |" + rec.getType() + "| |" + rec.getEdvo() + "| |" + rec.getTrans() + "| |" + rec.getTt() + "| |" + rec.getTs() + "| |" + rec.getEd() + "|<p>|");out.println("| |" + arec.getSerau() + "| |" + arec.getFn() + "| |" + arec.getAorder() + "| |" + arec.getRole());       		out.println("</BODY></HTML>");       	 	out.close();  			}							terminate();					} // END of servlet DoPost						/**************************************/	/* Query must be checked prior to use */	/**************************************/				String check_query(String qs){		int		num_single_quotes = 0;		int		num_relops = 0;	/*		char	query_array[] = qs.toCharArray();		            // Attempt to head off most common query errors				for(int i=0;i<qs.length();i++){			if(query_array[i] == '\''){				if(!isEven(num_single_quotes)){					if((i == qs.length()-1) || (query_array[i+1]==' ')){query_array[i] = '8';											num_single_quotes++;						}					else{						query_array[i] = '|';  // The "|" is a dummy to take the place of an embedded single quote						embedded_single_quotes = true;						}					}				else{					num_single_quotes++;					}								}							else if(query_array[i] == 'l' &&				query_array[i+1] == 'i' &&				query_array[i+2] == 'k' &&				query_array[i+3] == 'e' &&				isEven(num_single_quotes)){					num_relops++;					i = i + 4;					}						else if(query_array[i] == '!' && query_array[i+1] == '='){				num_relops++;				i++;				}			else if(query_array[i] == '=' || query_array[i] == '>' || query_array[i] == '<') num_relops++;			}				if(num_relops == 0){			return("<h2>There was an error in formatting the query.</h2><p>You must specify a type of search and either =. !=, > or <, e.g.:<p><samp>taxon = 'Tyrannosaurus'</samp>");			}		else if(num_single_quotes == 0){			return("<h2>There was an error in formatting the query.</h2><p>You must embed your search terms within <em>single</em> quotes, e.g.,<p><samp>taxon = 'Tyrannosaurus'</samp>");			}		else if(2*num_relops != num_single_quotes){			return ("<h2>There was an error in formatting the query.</h2><p>You have unmatched quotes or the numbers of terms are not right.");			}		if(embedded_single_quotes){		query_string = qs.toString();		} */		StringBuffer query_array = new StringBuffer(qs);		            // Attempt to head off most common query errors				for(int i=0;i<qs.length();i++){			if(query_array.charAt(i) == '\''){				if(!isEven(num_single_quotes)){					if((i == qs.length()-1) || (query_array.charAt(i+1)==' ')){//query_array[i] = '8';											num_single_quotes++;						}					else{						query_array.setCharAt(i,'|');  // The "|" is a dummy to take the place of an embedded single quote						embedded_single_quotes = true;						}					}				else{					num_single_quotes++;					}								}							else if(query_array.charAt(i) == 'l' &&				query_array.charAt(i+1) == 'i' &&				query_array.charAt(i+2) == 'k' &&				query_array.charAt(i+3) == 'e' &&				isEven(num_single_quotes)){					num_relops++;					i = i + 4;					}						else if(query_array.charAt(i) == '!' && query_array.charAt(i+1) == '='){				num_relops++;				i++;				}			else if(query_array.charAt(i) == '=' || query_array.charAt(i) == '>' || query_array.charAt(i) == '<') num_relops++;			}				if(num_relops == 0){			return("<h2>There was an error in formatting the query.</h2><p>You must specify a type of search and either =. !=, > or <, e.g.:<p><samp>taxon = 'Tyrannosaurus'</samp>");			}		else if(num_single_quotes == 0){			return("<h2>There was an error in formatting the query.</h2><p>You must embed your search terms within <em>single</em> quotes, e.g.,<p><samp>taxon = 'Tyrannosaurus'</samp>");			}		else if(2*num_relops != num_single_quotes){			return ("<h2>There was an error in formatting the query.</h2><p>You have unmatched quotes or the numbers of terms are not right.");			}		if(embedded_single_quotes){		query_string = query_array.toString();		} 		//return query_string;		return "OK" ;		}				/*************************************************************/	// Once connection established termination requires closing it 	//    or we might hang the database	/*************************************************************/			void terminate(){			try{//			stmt.close();			conn.close();			return;			}		catch(Exception e){} 		return;	}		/***********************************************/	/* Process GET requests the same way as POST   */	/***********************************************/	public void doGet (HttpServletRequest req,                       HttpServletResponse res)         throws ServletException, IOException        {                doPost(req,res);        }            boolean isEven(int number){    	    	if(number%2 == 0) return true;    	else return false;    	    	}    	    String escape_quotes(String target){            StringBuffer sb = new StringBuffer(target);    	while (target.indexOf('|') > -1){			sb.setCharAt(target.indexOf('|'),'\'');    		sb.insert(target.indexOf('|'), "\\");    		target = sb.toString();    		}    	return target;    	}		}	